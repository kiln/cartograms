#!/usr/bin/python
# -*- encoding: utf-8 -*-

import csv
import optparse
import sys
import yaml

"""
Join a series of CSV files on a shared key.

Reads configuration from stdin, in YAML format as follows:

- key: the name of the key column
  header: a boolean â€“ whether or not to include a header row in the output
  files:
  - file: filename.csv
    key: the name of the key column in this file (if different from the globally specified one)
    values: an array of column names: the columns to include in the output
  - file: second-filename.csv
    etc.
"""

def fail(fmt, **kwargs):
    print >>sys.stderr, fmt.format(**kwargs)
    sys.exit(64)

def main():
    conf = yaml.load(sys.stdin.read())
    
    rows = {} # key => [values]
    columns = []
    
    for i, f in enumerate(conf["files"]):
        csv_filename = f["file"]
        csv_f = open(csv_filename, 'r')
        csv_r = csv.reader(csv_f)
        
        key = f.get("key", conf.get("key"))
        values = f["values"]
        columns += values
        
        header = csv_r.next()
        index_by_column_name = dict(
          (x.decode("utf-8"), i) for (i, x) in enumerate(header)
        )
        
        def check(column_name):
            if column_name not in index_by_column_name:
                fail(u"{self}: File {csv_filename} does not have a column '{column_name}': columns are {columns}",
                  self=sys.argv[0],
                  csv_filename=csv_filename,
                  column_name=column_name,
                  columns=repr(index_by_column_name.keys()))
        
        check(key)
        for value in values:
            check(value)
        
        unmatched_keys = set(rows.keys())
        for row in csv_r:
            row = [x.decode(f.get("encoding", "utf8")) for x in row]
            key_v = row[index_by_column_name[key]]
            def v(value):
                try:
                    return row[index_by_column_name[value]]
                except IndexError:
                    return ""
            if key_v not in rows:
                rows[key_v] = [ "" for i in range(len(columns) - len(values)) ]
            else:
                unmatched_keys.discard(key_v)
            rows[key_v] += [ v(value) for value in values ]
        
        for k in unmatched_keys:
            rows[k] += [ "" for value in values ]
        
        csv_f.close()
    
    sys.stdout.flush()
    
    w = csv.writer(sys.stdout)
    if conf.get("header", False):
        w.writerow([conf.get("key")] + columns)
    for k, row in sorted(rows.iteritems()):
        w.writerow([ x.encode("utf-8") for x in [k] + row])
    sys.stdout.flush()

main()
